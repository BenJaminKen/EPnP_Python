# -*- coding: utf-8 -*-
"""
Created on Mon Nov 06 22:24:16 2017

@author: Weiyan Cai
"""

import numpy as np

def define_distances_btw_control_points(C):
    d12 = (C[0, 0] - C[1, 0]) ** 2 + (C[0, 1] - C[1, 1]) ** 2 + (C[0, 2] - C[1, 2]) ** 2
    d13 = (C[0, 0] - C[2, 0]) ** 2 + (C[0, 1] - C[2, 1]) ** 2 + (C[0, 2] - C[2, 2]) ** 2
    d14 = (C[0, 0] - C[3, 0]) ** 2 + (C[0, 1] - C[3, 1]) ** 2 + (C[0, 2] - C[3, 2]) ** 2
    d23 = (C[1, 0] - C[2, 0]) ** 2 + (C[1, 1] - C[2, 1]) ** 2 + (C[1, 2] - C[2, 2]) ** 2
    d24 = (C[1, 0] - C[3, 0]) ** 2 + (C[1, 1] - C[3, 1]) ** 2 + (C[1, 2] - C[3, 2]) ** 2
    d34 = (C[2, 0] - C[3, 0]) ** 2 + (C[2, 1] - C[3, 1]) ** 2 + (C[2, 2] - C[3, 2]) ** 2

    return np.array([d12, d13, d14, d23, d24, d34]).T
    
def L_2param_6eq_3unk(Km):
    m1_1 = Km[1, 0]
    m1_2 = Km[1, 1]
    m1_3 = Km[1, 2]
    m1_4 = Km[1, 3]
    m1_5 = Km[1, 4]
    m1_6 = Km[1, 5]
    m1_7 = Km[1, 6]
    m1_8 = Km[1, 7]
    m1_9 = Km[1, 8]
    m1_10 = Km[1, 9]
    m1_11 = Km[1, 10]
    m1_12 = Km[1, 11]
    
    m2_1 = Km[0, 0]
    m2_2 = Km[0, 1]
    m2_3 = Km[0, 2]
    m2_4 = Km[0, 3]
    m2_5 = Km[0, 4]
    m2_6 = Km[0, 5]
    m2_7 = Km[0, 6]
    m2_8 = Km[0, 7]
    m2_9 = Km[0, 8]
    m2_10 = Km[0, 9]
    m2_11 = Km[0, 10]
    m2_12 = Km[0, 11]
    
    t7 = (m1_6 ** 2)
    t8 = (m1_4 ** 2)
    t9 = (m1_1 ** 2)
    t10 = (m1_5 ** 2)
    t11 = (m1_2 ** 2)
    t12 = (m1_3 ** 2)
    t17 = m1_4 * m2_4
    t18 = m1_1 * m2_1
    t19 = m1_5 * m2_5
    t22 = m1_2 * m2_2
    t23 = m1_6 * m2_6
    t25 = m1_3 * m2_3
    t26 = (-m2_6 * m1_3 - m1_4 * m2_1 - m2_4 * m1_1 + t17 + t18 + t19 - m1_5 * m2_2 - m2_5 * m1_2 + t22 + t23 - m1_6 * m2_3 + t25)
    t29 = (m2_3 ** 2)
    t34 = (m2_4 ** 2)
    t35 = (m2_1 ** 2)
    t36 = (m2_5 ** 2)
    t37 = (m2_2 ** 2)
    t38 = (m2_6 ** 2)
    t44 = (m1_7 ** 2)
    t45 = (m1_8 ** 2)
    t46 = (m1_9 ** 2)
    t55 = m1_8 * m2_8
    t56 = m1_9 * m2_9
    t58 = m1_7 * m2_7
    t59 = (-m1_9 * m2_3 - m2_8 * m1_2 - m2_9 * m1_3 - m1_7 * m2_1 - m2_7 * m1_1 + t55 + t22 + t56 + t18 - m1_8 * m2_2 + t25 + t58)
    t64 = (m2_8 ** 2)
    t65 = (m2_9 ** 2)
    t68 = (m2_7 ** 2)
    t72 = (m1_11 ** 2)
    t73 = (m1_12 ** 2)
    t74 = (m1_10 ** 2)
    t85 = m1_10 * m2_10
    t86 = m1_11 * m2_11
    t88 = m1_12 * m2_12
    t89 = (-m1_10 * m2_1 - m2_10 * m1_1 - m1_12 * m2_3 - m2_11 * m1_2 - m1_11 * m2_2 + t18 + t22 + t25 + t85 + t86 - m2_12 * m1_3 + t88)
    t92 = (m2_11 ** 2)
    t95 = (m2_12 ** 2)
    t96 = (m2_10 ** 2)
    t113 = (-m1_9 * m2_6 - m2_9 * m1_6 + t55 + t23 + t17 + t56 + t58 - m1_7 * m2_4 - m2_7 * m1_4 - m1_8 * m2_5 - m2_8 * m1_5 + t19)
    t134 = (-m1_10 * m2_4 - m2_10 * m1_4 + t88 + t23 + t17 + t85 + t86 - m1_11 * m2_5 - m2_11 * m1_5 - m1_12 * m2_6 - m2_12 * m1_6 + t19)
    t155 = (t58 + t88 - m2_10 * m1_7 - m2_11 * m1_8 + t56 - m1_10 * m2_7 + t55 + t85 + t86 - m1_12 * m2_9 - m2_12 * m1_9 - m1_11 * m2_8)
    
    L = np.zeros((6, 3))
    
    L[0, 0] = -2 * m1_4 * m1_1 - 2 * m1_5 * m1_2 - 2 * m1_6 * m1_3 + t7 + t8 + t9 + t10 + t11 + t12
    L[0, 1] = 2 * t26
    L[0, 2] = -2 * m2_6 * m2_3 + t29 - 2 * m2_4 * m2_1 - 2 * m2_5 * m2_2 + t34 + t35 + t36 + t37 + t38
    L[1, 0] = -2 * m1_7 * m1_1 + t12 - 2 * m1_9 * m1_3 + t44 + t45 + t46 - 2 * m1_8 * m1_2 + t9 + t11
    L[1, 1] = 2 * t59
    L[1, 2] = -2 * m2_8 * m2_2 - 2 * m2_9 * m2_3 + t64 + t65 - 2 * m2_7 * m2_1 + t29 + t68 + t37 + t35
    L[2, 0] = t9 - 2 * m1_12 * m1_3 + t72 + t73 + t74 + t12 - 2 * m1_11 * m1_2 - 2 * m1_10 * m1_1 + t11
    L[2, 1] = 2 * t89
    L[2, 2] = -2 * m2_11 * m2_2 + t37 + t92 - 2 * m2_10 * m2_1 + t95 + t29 + t96 - 2 * m2_12 * m2_3 + t35
    L[3, 0] = -2 * m1_9 * m1_6 + t8 + t10 + t7 - 2 * m1_7 * m1_4 + t44 + t45 + t46 - 2 * m1_8 * m1_5
    L[3, 1] = 2 * t113
    L[3, 2] = -2 * m2_9 * m2_6 + t68 + t64 - 2 * m2_7 * m2_4 - 2 * m2_8 * m2_5 + t34 + t36 + t38 + t65
    L[4, 0] = t73 + t8 + t10 + t7 - 2 * m1_10 * m1_4 - 2 * m1_11 * m1_5 - 2 * m1_12 * m1_6 + t74 + t72
    L[4, 1] = 2 * t134
    L[4, 2] = -2 * m2_12 * m2_6 + t96 + t92 - 2 * m2_10 * m2_4 - 2 * m2_11 * m2_5 + t34 + t36 + t38 + t95
    L[5, 0] = t46 + t73 + t44 + t45 + t74 + t72 - 2 * m1_11 * m1_8 - 2 * m1_10 * m1_7 - 2 * m1_12 * m1_9
    L[5, 1] = 2 * t155
    L[5, 2] = t65 - 2 * m2_10 * m2_7 + t96 + t92 + t95 - 2 * m2_11 * m2_8 + t68 + t64 - 2 * m2_12 * m2_9
    
    return L

def L_2param_6eq_6unk(Km):
    m1_1 = Km[2, 0]
    m1_2 = Km[2, 1]
    m1_3 = Km[2, 2]
    m1_4 = Km[2, 3]
    m1_5 = Km[2, 4]
    m1_6 = Km[2, 5]
    m1_7 = Km[2, 6]
    m1_8 = Km[2, 7]
    m1_9 = Km[2, 8]
    m1_10 = Km[2, 9]
    m1_11 = Km[2, 10]
    m1_12 = Km[2, 11]
    
    m2_1 = Km[1, 0]
    m2_2 = Km[1, 1]
    m2_3 = Km[1, 2]
    m2_4 = Km[1, 3]
    m2_5 = Km[1, 4]
    m2_6 = Km[1, 5]
    m2_7 = Km[1, 6]
    m2_8 = Km[1, 7]
    m2_9 = Km[1, 8]
    m2_10 = Km[1, 9]
    m2_11 = Km[1, 10]
    m2_12 = Km[1, 11]
    
    m3_1 = Km[0, 0]
    m3_2 = Km[0, 1]
    m3_3 = Km[0, 2]
    m3_4 = Km[0, 3]
    m3_5 = Km[0, 4]
    m3_6 = Km[0, 5]
    m3_7 = Km[0, 6]
    m3_8 = Km[0, 7]
    m3_9 = Km[0, 8]
    m3_10 = Km[0, 9]
    m3_11 = Km[0, 10]
    m3_12 = Km[0, 11]

    t1 = (m1_2 ** 2)
    t4 = (m1_6 ** 2)
    t5 = (m1_3 ** 2)
    t6 = (m1_5 ** 2)
    t11 = (m1_4 ** 2)
    t12 = (m1_1 ** 2)
    t20 = m1_4 * m2_4
    t21 = m1_3 * m2_3
    t22 = m1_5 * m2_5
    t23 = m1_2 * m2_2
    t24 = m1_6 * m2_6
    t25 = m1_1 * m2_1
    t26 = (-m2_4 * m1_1 - m2_5 * m1_2 - m2_6 * m1_3 - m1_6 * m2_3 - m1_4 * m2_1 - m1_5 * m2_2 + t20 + t21 + t22 + t23 + t24 + t25)
    t27 = m1_6 * m3_6
    t29 = m1_5 * m3_5
    t30 = m1_4 * m3_4
    t33 = m1_3 * m3_3
    t35 = m1_1 * m3_1
    t38 = m1_2 * m3_2
    t39 = (t27 - m1_6 * m3_3 + t29 + t30 - m1_4 * m3_1 - m3_6 * m1_3 + t33 - m3_5 * m1_2 + t35 - m3_4 * m1_1 - m1_5 * m3_2 + t38)
    t40 = (m2_4 ** 2)
    t41 = (m2_2 ** 2)
    t42 = (m2_5 ** 2)
    t43 = (m2_1 ** 2)
    t44 = (m2_6 ** 2)
    t45 = (m2_3 ** 2)
    t53 = m2_4 * m3_4
    t56 = m2_5 * m3_5
    t57 = m2_2 * m3_2
    t60 = m2_1 * m3_1
    t62 = m2_6 * m3_6
    t63 = m2_3 * m3_3
    t65 = (t53 - m2_4 * m3_1 - m3_4 * m2_1 + t56 + t57 - m2_5 * m3_2 - m2_6 * m3_3 + t60 - m3_6 * m2_3 + t62 + t63 - m3_5 * m2_2)
    t66 = (m3_5 ** 2)
    t69 = (m3_4 ** 2)
    t70 = (m3_3 ** 2)
    t71 = (m3_2 ** 2)
    t72 = (m3_6 ** 2)
    t75 = (m3_1 ** 2)
    t81 = (m1_9 ** 2)
    t82 = (m1_8 ** 2)
    t83 = (m1_7 ** 2)
    t90 = m1_8 * m2_8
    t91 = m1_7 * m2_7
    t93 = m1_9 * m2_9
    t98 = (-m1_9 * m2_3 + t21 + t90 + t23 + t91 + t25 - m2_7 * m1_1 + t93 - m2_9 * m1_3 - m1_8 * m2_2 - m1_7 * m2_1 - m2_8 * m1_2)
    t101 = m1_9 * m3_9
    t102 = m1_7 * m3_7
    t106 = m1_8 * m3_8
    t108 = (-m3_8 * m1_2 + t38 + t33 - m3_9 * m1_3 + t101 + t102 - m1_7 * m3_1 - m1_9 * m3_3 + t35 - m3_7 * m1_1 + t106 - m1_8 * m3_2)
    t113 = (m2_8 ** 2)
    t116 = (m2_9 ** 2)
    t117 = (m2_7 ** 2)
    t119 = m2_8 * m3_8
    t122 = m2_9 * m3_9
    t125 = m2_7 * m3_7
    t128 = (t119 - m2_7 * m3_1 - m3_8 * m2_2 + t57 + t63 + t60 + t122 - m2_8 * m3_2 - m3_7 * m2_1 + t125 - m3_9 * m2_3 - m2_9 * m3_3)
    t129 = (m3_7 ** 2)
    t130 = (m3_8 ** 2)
    t133 = (m3_9 ** 2)
    t141 = (m1_10 ** 2)
    t142 = (m1_11 ** 2)
    t143 = (m1_12 ** 2)
    t151 = m1_10 * m2_10
    t152 = m1_12 * m2_12
    t154 = m1_11 * m2_11
    t158 = (-m2_10 * m1_1 - m2_12 * m1_3 + t151 + t23 + t25 + t152 + t21 - m1_10 * m2_1 + t154 - m1_11 * m2_2 - m2_11 * m1_2 - m1_12 * m2_3)
    t160 = m1_12 * m3_12
    t164 = m1_10 * m3_10
    t165 = m1_11 * m3_11
    t168 = (-m3_10 * m1_1 + t160 - m3_11 * m1_2 + t38 + t33 - m1_12 * m3_3 - m3_12 * m1_3 + t164 + t35 + t165 - m1_11 * m3_2 - m1_10 * m3_1)
    t169 = (m2_12 ** 2)
    t170 = (m2_10 ** 2)
    t171 = (m2_11 ** 2)
    t179 = m2_10 * m3_10
    t181 = m2_12 * m3_12
    t185 = m2_11 * m3_11
    t188 = (t57 + t60 + t179 - m2_10 * m3_1 + t181 - m2_12 * m3_3 - m3_12 * m2_3 - m3_10 * m2_1 + t63 + t185 - m2_11 * m3_2 - m3_11 * m2_2)
    t191 = (m3_12 ** 2)
    t192 = (m3_10 ** 2)
    t193 = (m3_11 ** 2)
    t212 = (t22 + t91 + t93 - m1_7 * m2_4 + t20 - m2_7 * m1_4 + t90 - m2_8 * m1_5 - m1_8 * m2_5 - m1_9 * m2_6 + t24 - m2_9 * m1_6)
    t219 = (t101 + t30 - m3_9 * m1_6 - m3_8 * m1_5 - m1_8 * m3_5 - m3_7 * m1_4 + t27 - m1_9 * m3_6 - m1_7 * m3_4 + t102 + t106 + t29)
    t233 = (t53 - m2_8 * m3_5 - m2_9 * m3_6 - m2_7 * m3_4 + t125 + t122 - m3_8 * m2_5 + t62 + t119 + t56 - m3_7 * m2_4 - m3_9 * m2_6)
    t254 = (-m2_11 * m1_5 + t154 + t151 - m1_12 * m2_6 + t20 - m1_10 * m2_4 - m2_12 * m1_6 - m2_10 * m1_4 - m1_11 * m2_5 + t152 + t24 + t22)
    t261 = (t30 - m3_12 * m1_6 - m1_10 * m3_4 - m1_11 * m3_5 + t160 + t27 + t164 + t165 - m3_11 * m1_5 - m3_10 * m1_4 - m1_12 * m3_6 + t29)
    t275 = (-m3_10 * m2_4 + t56 - m2_10 * m3_4 + t62 - m3_12 * m2_6 - m2_11 * m3_5 + t53 - m3_11 * m2_5 - m2_12 * m3_6 + t179 + t181 + t185)
    t296 = (-m2_12 * m1_9 + t152 + t91 + t90 - m1_11 * m2_8 + t151 - m2_11 * m1_8 + t93 - m1_10 * m2_7 - m1_12 * m2_9 - m2_10 * m1_7 + t154)
    t303 = (t164 + t102 - m3_10 * m1_7 + t160 - m3_12 * m1_9 - m1_10 * m3_7 - m3_11 * m1_8 + t101 - m1_12 * m3_9 + t106 + t165 - m1_11 * m3_8)
    t317 = (t125 + t119 - m3_12 * m2_9 - m3_10 * m2_7 - m2_11 * m3_8 - m3_11 * m2_8 + t122 + t179 - m2_12 * m3_9 + t181 - m2_10 * m3_7 + t185)
    
    L = np.zeros((6, 6))
    
    L[0, 0] = t1 - 2 * m1_4 * m1_1 + t4 + t5 + t6 - 2 * m1_5 * m1_2 - 2 * m1_6 * m1_3 + t11 + t12
    L[0, 1] = 2 * t26
    L[0, 2] = 2 * t39
    L[0, 3] = t40 + t41 + t42 + t43 + t44 + t45 - 2 * m2_5 * m2_2 - 2 * m2_6 * m2_3 - 2 * m2_4 * m2_1
    L[0, 4] = 2 * t65
    L[0, 5] = t66 - 2 * m3_4 * m3_1 + t69 + t70 + t71 + t72 - 2 * m3_6 * m3_3 + t75 - 2 * m3_5 * m3_2
    L[1, 0] = -2 * m1_8 * m1_2 + t12 + t81 + t5 + t82 + t83 + t1 - 2 * m1_9 * m1_3 - 2 * m1_7 * m1_1
    L[1, 1] = 2 * t98
    L[1, 2] = 2 * t108
    L[1, 3] = -2 * m2_8 * m2_2 - 2 * m2_9 * m2_3 + t113 - 2 * m2_7 * m2_1 + t116 + t117 + t41 + t43 + t45
    L[1, 4] = 2 * t128
    L[1, 5] = t75 + t70 + t129 + t71 + t130 - 2 * m3_9 * m3_3 + t133 - 2 * m3_8 * m3_2 - 2 * m3_7 * m3_1
    L[2, 0] = -2 * m1_11 * m1_2 + t141 + t142 + t12 + t1 + t5 + t143 - 2 * m1_10 * m1_1 - 2 * m1_12 * m1_3
    L[2, 1] = 2 * t158
    L[2, 2] = 2 * t168
    L[2, 3] = t169 + t41 + t43 + t45 + t170 + t171 - 2 * m2_12 * m2_3 - 2 * m2_10 * m2_1 - 2 * m2_11 * m2_2
    L[2, 4] = 2 * t188
    L[2, 5] = t71 - 2 * m3_12 * m3_3 + t75 + t191 + t70 + t192 + t193 - 2 * m3_10 * m3_1 - 2 * m3_11 * m3_2
    L[3, 0] = -2 * m1_9 * m1_6 + t11 + t4 + t81 + t82 + t6 + t83 - 2 * m1_7 * m1_4 - 2 * m1_8 * m1_5
    L[3, 1] = 2 * t212
    L[3, 2] = 2 * t219
    L[3, 3] = t117 + t113 - 2 * m2_8 * m2_5 - 2 * m2_7 * m2_4 - 2 * m2_9 * m2_6 + t116 + t40 + t42 + t44
    L[3, 4] = 2 * t233
    L[3, 5] = t129 - 2 * m3_9 * m3_6 + t69 + t66 + t72 + t133 - 2 * m3_8 * m3_5 - 2 * m3_7 * m3_4 + t130
    L[4, 0] = t4 + t143 + t11 - 2 * m1_12 * m1_6 - 2 * m1_11 * m1_5 - 2 * m1_10 * m1_4 + t6 + t141 + t142
    L[4, 1] = 2 * t254
    L[4, 2] = 2 * t261
    L[4, 3] = t170 + t171 + t169 - 2 * m2_10 * m2_4 - 2 * m2_11 * m2_5 - 2 * m2_12 * m2_6 + t40 + t42 + t44
    L[4, 4] = 2 * t275
    L[4, 5] = t69 + t66 + t72 - 2 * m3_12 * m3_6 - 2 * m3_10 * m3_4 + t193 - 2 * m3_11 * m3_5 + t192 + t191
    L[5, 0] = t142 - 2 * m1_10 * m1_7 + t141 + t83 + t143 + t82 - 2 * m1_12 * m1_9 + t81 - 2 * m1_11 * m1_8
    L[5, 1] = 2 * t296
    L[5, 2] = 2 * t303
    L[5, 3] = t171 + t170 - 2 * m2_12 * m2_9 - 2 * m2_10 * m2_7 - 2 * m2_11 * m2_8 + t113 + t169 + t116 + t117
    L[5, 4] = 2 * t317
    L[5, 5] = -2 * m3_11 * m3_8 + t193 + t133 + t129 + t192 + t130 - 2 * m3_12 * m3_9 + t191 - 2 * m3_10 * m3_7
    
    return L
